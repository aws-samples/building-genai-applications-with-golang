AWSTemplateFormatVersion: "2010-09-09"
#------------------------------------------------------
# Mappings
#------------------------------------------------------
Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.0.0/24
    public-subnet-2:
      CIDR: 10.0.2.0/24
    private-subnet-1:
      CIDR: 10.0.1.0/24
    private-subnet-2:
      CIDR: 10.0.3.0/24
#------------------------------------------------------
# Parameters
#------------------------------------------------------
Parameters:
  CidrBlock:
    Type: String
    Description: CidrBlock
    Default: 10.0.0.0/16
  InternetCidrBlock:
    Type: String
    Description: UserCidrBlock
    Default: 0.0.0.0/0
#------------------------------------------------------
# Resources: VPC, Subnets, NAT, Routes
#------------------------------------------------------
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: VPC flow logs not required for this example
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
  #------------------------------------------------------
  # Resources: internet gateway
  #------------------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ig

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #------------------------------------------------------
  # Resources: public and private subnets
  #------------------------------------------------------
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - public-subnet-1
          - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - public-subnet-2
          - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - private-subnet-1
          - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - private-subnet-2
          - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2

  #------------------------------------------------------
  # Resources: nat gateway
  #------------------------------------------------------
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt: [NatGatewayEIP, AllocationId]
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-gateway

  #------------------------------------------------------
  # Resources: public route table
  #------------------------------------------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-rt

  RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref InternetCidrBlock
      GatewayId: !Ref InternetGateway

  #------------------------------------------------------
  # Resources: private route table
  #------------------------------------------------------
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-rt

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Ref InternetCidrBlock
      NatGatewayId: !Ref NatGateway

  #------------------------------------------------------
  # Resources: routeable subnet associations
  #------------------------------------------------------
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  #------------------------------------------------------
  # Security Group:
  #------------------------------------------------------
  ECSFargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: return traffic to user from internet for testing
          - id: W40
            reason: engress open all port for the internet
          - id: W42
            reason: allow all ingress port within ecs fargate security group
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      VpcId: !Ref VPC


  ECSFargateSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows worker nodes to communicate with the control plane
      GroupId: !Ref ECSFargateSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ECSFargateSecurityGroup
      SourceSecurityGroupOwnerId: !Ref AWS::AccountId

  ECSFargateSecurityGroupIngressALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows worker nodes to communicate with the control plane
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      GroupId: !Ref ECSFargateSecurityGroup
  
  ECSFargateSecurityGroupIngressALBGForGoApp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows worker nodes to communicate with the control plane
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      GroupId: !Ref ECSFargateSecurityGroup

  ECSFargateSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress for environment
      GroupId: !Ref ECSFargateSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: return traffic to user from internet for testing
          - id: W40
            reason: engress open all port for the internet
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC

  ALBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: open port 80 for users from internet 
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref InternetCidrBlock
      GroupId: !Ref ALBSecurityGroup
  
  ALBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: return traffic to user from internet
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

#------------------------------------------------------
# Export:
#------------------------------------------------------
Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-vpc
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-2
  PrivateSubnet1:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-private-subnet-1
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-private-subnet-2
  PrivateRouteTable:
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-private-route-table
  InternetGateway:
    Value: !Ref InternetGateway
    Export:
      Name: !Sub ${AWS::StackName}-igw
  ECSFargateSecurityGroup:
    Value: !Ref ECSFargateSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ecs-fargate-sg
  ALBSecurityGroup:
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-alb-sg