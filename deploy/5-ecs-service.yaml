AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Service
#------------------------------------------------------
# Parameters 
#------------------------------------------------------
Parameters:
  NetworkStackName:
    Type: String
    Description: Name of the network stack
    Default: "cfn-network"
  ClusterStackName:
    Type: String
    Description: Name of the ECS cluster stack to create the service
    Default: "ecs-cluster-stack"
  ALBStackName:
    Type: String
    Description: Name of the ALB stack to associate with the service
    Default: "cfn-load-balancer"
  TaskDefinitionStackName:
    Type: String
    Description: Name of the task definition stack
    Default: "cfn-task-def-employee"
  DesiredCount:
    Type: Number
    Description: Desired number of tasks
    Default: 1
  ContainerName:
    Type: String
    Description: Name of the container
    Default: "mysql-go-employee-app"
  ServiceName:
    Type: String
    Description: Name of the service
    Default: "employee-service"

#------------------------------------------------------
# Resources: ecs service, scaling target, scaling policy
#------------------------------------------------------
Resources:
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      TaskDefinition:
        Fn::ImportValue: !Sub ${TaskDefinitionStackName}-task-def
      Cluster:
        Fn::ImportValue: !Sub ${ClusterStackName}-ecscluster
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          # AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${NetworkStackName}-ecs-fargate-sg
          Subnets:
            - Fn::ImportValue: !Sub ${NetworkStackName}-private-subnet-1
            - Fn::ImportValue: !Sub ${NetworkStackName}-private-subnet-2
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: 3000
          TargetGroupArn:
            Fn::ImportValue: !Sub ${ALBStackName}-target-group
      HealthCheckGracePeriodSeconds: 60

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId:
        Fn::Join:
          - /
          - - service
            - Fn::ImportValue: !Sub ${ClusterStackName}-ecscluster
            - !Ref ServiceName
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AverageCPUUtilizationPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  AutoScalingRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "allow autoscaling sending logs tou clouwatch loggroup" 
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.application-autoscaling.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: MyAWSApplicationAutoscalingECSServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricAlarm
                Resource: "*"
